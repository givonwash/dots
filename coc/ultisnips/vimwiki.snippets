# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt

# Format
# ;[:letter:]*;[:letter:]+ --> Pre-formatted object (e.g., hypothesis function)
# [:letter:]+;[:letter:]+ --> Operation (e.g., exponentiation/indexing)

###############################################################################
# Operations
###############################################################################

# LaTex-Specific
snippet lp;i "Superscript" iA
^{${1:(i)}}$0
endsnippet

snippet lb;i "Subscript" iA
_{${1:i}}$0
endsnippet

snippet lo;i "Operations over indexes" iA
\\${1:sum}_{${2:i=1}}^{${3:m}} $0
endsnippet

snippet la;e "Align environment equal sign" iA
&= $0
endsnippet

###############################################################################
# Objects
###############################################################################

# General
snippet ;;m "Inline Math" iA
$$1$$0
endsnippet

snippet ;;l "LaTex Pre-formatted Text" iA
{{$${1:%align%}
${2:${VISUAL:y = mx + b}}
}}$$0
endsnippet

snippet ;;c "Pre-formatted Text" bA
{{{${1:rust}
${2:${VISUAL:use std::io;}}
}}}$0
endsnippet

snippet ;;b "Bold Text" iA
*${1:${VISUAL:Bold Text}}*$0
endsnippet

snippet ;;i "Italic Text" iA
_${1:${VISUAL:Italic Text}}_$0
endsnippet

snippet ;;n "Inline Code" iA
\`${1:${VISUAL:code}}\`
endsnippet

snippet ;;sp "Superscript (vimwiki)" iA
^${1:${VISUAL:th}}^
endsnippet

snippet ;;sb "Subscript (vimwiki)" iA
,,${1:${VISUAL:subscript}},,
endsnippet

snippet ;j;n "Meeting Notes" bA
${1:==} ${2:`date +%Y-%m-%d%l:%M%p`} $1
	* $0
endsnippet

# LaTex-Specific
snippet ;l;i "(ith) object/variable" iA
${1:x}${2:${3:^}\{${4:(${5:i})}\}}$0
endsnippet

snippet ;l;f "Fractions" iA
\frac{${1:p}}{${2:q}}$0
endsnippet

snippet ;l;c "Calligraphic Lettering" iA
\mathcal{${1:X}}$0
endsnippet

snippet ;l;s "Common Sets" iA
\mathbb{${1:R}}$0
endsnippet

snippet ;l;h "Hypothesis function for ith observation" iA
h${1:_\{\theta\}}(${2:x}${3:^\{${4:(i)}\}})$0
endsnippet

snippet ;l;p "Surround LaTex pre-formatted text with \left( and \right)" iA
\left( ${1:${VISUAL:x^\{(i)\}}} \right)$0
endsnippet

snippet ;l;[ "Surround LaTex pre-formatted text \left[ and \right]" iA
\left[ ${1:${VISUAL:x^\{(i)\}}} \right]$0
endsnippet

# Rust-Specific
snippet ;r;f "Rust main Function" iA
fn ${1:main}($2) $3{
	$4
}$0
endsnippet

snippet ;r;p "Rust println!" iA
println!(${1:"${2:Hello, world!}"});$0
endsnippet

snippet ;r;s "Rust struct" iA
struct ${1:name} {
	$2
}$0
endsnippet

snippet ;r;i "Rust impl block" iA
impl ${1:structure} {
	$2
}$0
endsnippet

snippet ;r;e "Rust enum" iA
enum ${1:enumeration} {
	$2
}$0
endsnippet

snippet ;r;m "Rust match expression" iA
match ${1:to_match} {
	$2
}$0
endsnippet
